#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+PROPERTY:    header-args:elisp  :tangle ~/projects/emacs-config/init.el

* Setup
** Personal info and constants
 #+begin_src elisp
 (defconst as/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
 (defconst as/elisp (concat (getenv "HOME") "/projects/emacs-config/"))
 (add-to-list 'load-path as/elisp)
 (setq user-full-name "Andrew Sanchez"
       user-mail-address "inbox.asanchez@gmail.com")
 #+end_src
** Package management
 #+begin_src elisp
   (require 'package)
       (add-to-list 'load-path "packages")
       (setq package-archives
           '(("gnu" . "http://elpa.gnu.org/packages/")
           ("marmalade" . "http://marmalade-repo.org/packages/")
             ("melpa" . "http://melpa.milkbox.net/packages/")
             ("melpa-stable" . "http://stable.melpa.org/packages/")
             ("elpy" . "https://jorgenschaefer.github.io/packages/")
             ("org" . "http://orgmode.org/elpa/")))
     (package-initialize)
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (eval-when-compile
       (require 'use-package))
     (setq use-package-always-ensure t)
     (setq use-package-verbose t)
   (use-package diminish
     :config
     (diminish 'undo-tree-mode))
 #+end_src
** Tangle init.el
[[https://emacs.stackexchange.com/questions/20707/automatically-tangle-org-files-in-a-specific-directory#20733][Automatically tangle]] this file on save.

#+begin_src elisp
(defun as/tangle-dotfiles ()
  "If the current file is in 'as/elisp' blocks are tangled"
  (when (equal (file-name-directory (directory-file-name buffer-file-name))
               as/elisp)
    (org-babel-tangle)
    (message "%s tangled" buffer-file-name)))
(add-hook 'after-save-hook #'as/tangle-dotfiles)
#+end_src
** Helpful
#+begin_src elisp
  (use-package helpful
    :commands
    (helpful-callable
     helpful-function
     helpful-macro
     helpful-command
     helpful-key
     helpful-variable
     helpful-at-point)
    :init
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h o") #'helpful-at-point))
#+end_src
* Custom set variables
#+begin_src elisp
  (setq custom-file (expand-file-name "custom.el" as/elisp))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
* General Binding Config
Also check out [[https://github.com/nonsequitur/smex][smex]] 
#+begin_src elisp
  (global-set-key (kbd "C-6") 'evil-switch-to-windows-last-buffer)
  (global-set-key (kbd "C-w") 'evil-window-next)
  (global-set-key (kbd "C-x f") 'helm-find-files)
  
    (use-package which-key
	:defer 10
	:config
	(which-key-mode))
#+end_src
* Toggles
#+begin_src elisp
(evil-leader/set-key "tf" 'flyspell-mode)
#+end_src
* Evil
#+begin_src elisp
  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (setq evil-leader/in-all-states t)
    (setq evil-leader/non-normal-prefix "C-")
    (evil-leader/set-leader "<SPC>"))

  (use-package evil
      :config
      (evil-mode 1))

  (use-package evil-nerd-commenter
    :config
    (evil-leader/set-key
      "ci" 'evilnc-comment-or-uncomment-lines
      "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
      "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
      "cc" 'evilnc-copy-and-comment-lines
      "cp" 'evilnc-comment-or-uncomment-paragraphs
      "cr" 'comment-or-uncomment-region
      "cv" 'evilnc-toggle-invert-comment-line-by-line
      "."  'evilnc-copy-and-comment-operator
      "\\" 'evilnc-comment-operator))

  (use-package evil-surround
      :config
      (global-evil-surround-mode 1))

  (use-package evil-lisp-state
      :init (setq evil-lisp-state-global t)
      :config (evil-lisp-state-leader "<SPC> k"))

  ;; (use-package bind-map) 

  (use-package evil-matchit
    :config
    (require 'evil-matchit)
    (global-evil-matchit-mode 1))
#+end_src

** Exclude list
#+begin_src elisp
  (add-to-list 'evil-emacs-state-modes 'dired-mode)
  (add-to-list 'evil-emacs-state-modes 'flycheck-error-list-mode)
  (add-to-list 'evil-emacs-state-modes 'realgud-short-key-mode)
  (evil-set-initial-state 'realgud-short-key-mode 'emacs)
  (evil-set-initial-state 'Info-mode 'emacs)

#+end_src
* Navigation
#+begin_src elisp
  (use-package avy
    :init
    (defhydra hydra-avy (:color blue)
      "avy-goto"
      ("c" avy-goto-char "char")
      ("C" avy-goto-char-2 "char-2")
      ("w" avy-goto-word-1 "word")
      ("s" avy-goto-subword-1 "subword")
      ("l" avy-goto-line "line")
      ("u" link-hint-open-link "open-URI")
      ("U" link-hint-copy-link "copy-URI"))
    (evil-leader/set-key "j" 'hydra-avy/body)
    :commands hydra-avy/body
    :config
    (use-package link-hint))
#+end_src
* Misc
#+begin_src elisp
  (use-package expand-region
    :commands (er/expand-region)
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (evil-leader/set-key
    "!" 'shell-command)
#+end_src
* Modeline
Display a more compact mode line

#+begin_src elisp
  (use-package smart-mode-line
      :init
      (setq sml/no-confirm-load-theme t)
      (sml/setup))
  (display-time-mode 1)
#+end_src
* Helm
  Also check out [[https://github.com/abo-abo/swiper][ivy and swiper]] and helm-swiper.
#+begin_src elisp
  (use-package helm
    :init
    (evil-leader/set-key
	"sg" 'helm-google-suggest
	"<SPC>" 'helm-M-x
	"sj" 'helm-semantic-or-imenu
	"ha" 'helm-apropos
	"ho" 'helm-info-org
	"hi" 'helm-info
	"ss" 'helm-occur)
    :commands
    (helm-google-suggest helm-M-x helm-semantic-or-imenu helm-apropos helm-occur)
    :bind (("M-y" . helm-show-kill-ring)
	   ("C-h a" . helm-apropos)
	   ("M-x" . helm-M-x)
	   ("C-x b" . helm-buffers-list))
    :config
    (require 'helm-config))

    (use-package helm-descbinds
      :bind (("C-h b" . helm-descbinds)))
#+end_src
* Hydra
#+begin_src elisp
(use-package hydra)
#+end_src
** Buffers
#+begin_src elisp
  (defhydra hydra-buffers (:color blue)
    "Buffers"
    ("d" kill-this-buffer "kill buffer")
    ("s" (lambda () (interactive) (pop-to-buffer "*scratch*")) "*scratch*")
    ("i" (lambda () (interactive) (pop-to-buffer "*info*")) "*info*")
    ("h" (lambda () (interactive) (pop-to-buffer "*Help*")) "*Help*")
    ("e" (lambda () (interactive) (pop-to-buffer "*eshell*")) "*eshell*")
    ("m" (lambda () (interactive) (pop-to-buffer "*Messages*")) "*Messages*")
    ("b" helm-buffers-list "helm buffers list"))

  (evil-leader/set-key "b" 'hydra-buffers/body)
#+end_src
** Files
#+begin_src elisp

  (evil-leader/set-key "f" 'hydra-files/body)

  (defhydra hydra-files (:color blue)
    "Files"

    ("d" (lambda () (interactive)
	   (find-file "~/projects/emacs-config/init.org"))
     "dot-file")

    ("g" (lambda () (interactive)
	  (find-file "~/org/agenda/gtd.org"))
     "gtd")
    ("f" helm-find-files "helm-find-files")
    ("m" helm-multi-files "helm-multi-files")
    ("b" helm-filtered-bookmarks "helm-filtered-bookmarks")
    ("t" neotree-toggle "neotree-toggle")
    ("r" helm-recentf "recentf-open-files"))

#+end_src
** Applications
#+begin_src elisp
  ;; (defhydra hydra-applications ()
  ;;   "Applications"
  ;;   ("d" deft "deft find file"))
  (evil-leader/set-key "ad" 'deft)
  (evil-leader/set-key "am" 'mu4e)
#+end_src
* Yasnippet
#+begin_src elisp

  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (defhydra hydra-yasnippet (:color blue :hint nil)
      "
                  ^YASnippets^
    --------------------------------------------
      Modes:    Load/Visit:    Actions:

     _g_lobal  _d_irectory    _i_nsert
     _m_inor   _f_ile         _t_ryout
     _e_xtra   _l_ist         _n_ew
             _a_ll
    "
      ("d" yas-load-directory)
      ("e" yas-activate-extra-mode)
      ("i" yas-insert-snippet)
      ("f" yas-visit-snippet-file :color blue)
      ("n" yas-new-snippet)
      ("t" yas-tryout-snippet)
      ("l" yas-describe-tables)
      ("g" yas/global-mode)
      ("m" yas/minor-mode)
      ("a" yas-reload-all))
    (evil-leader/set-key "y" 'hydra-yasnippet/body)
    :defer 15
    ; not sure why this doesn't work
    ; :commands hydra-yasnippet/body
    :config
    (require 'yasnippet)
    (yas-global-mode 1))
#+end_src
* Org-mode
** General
#+begin_src elisp
  (use-package org
    :mode (("\\.org$" . org-mode))
    :commands (org-agenda org-capture)
    :load-path "~/.emacs.d/packages/org-mode/lisp"
    :diminish org-mode
    :init
    (evil-leader/set-key
        "oa" 'org-agenda
        "oc" 'org-capture
        "ot" 'hydra-org-clock/body)
    :config
    (setq as/agenda (concat (getenv "HOME") "/org/agenda/"))
    (setq as/views (concat (getenv "HOME") "/org/views/"))
    (setq as/gtd (concat as/agenda "gtd.org"))

    (load "org-config")
    (add-hook 'org-mode-hook 'toggle-truncate-lines)
    (setq org-hide-leading-stars t)
    (setq org-default-notes-file "/Users/andrew/org/notes.org")
    (setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")))
    (setq org-refile-targets '((nil :maxlevel . 3)
                               (org-agenda-files :maxlevel . 2)))
    (setq org-outline-path-complete-in-steps nil)
    (setq org-completion-use-ido nil)
    (setq org-refile-use-outline-path t) 
    (defun as/verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets"
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))
    (setq org-refile-target-verify-function 'as/verify-refile-target)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-src-fontify-natively t))

    (use-package org-pomodoro
      :commands org-pomodoro
      :config
      (setq mindfulness-bell "/Users/andrew/Music/Miscellaneous/Timer_Sounds/mindfullness_bell.mp3") 
      (setq mindfulness-chimes "/Users/andrew/Music/Miscellaneous/Timer_Sounds/chimes.mp3") 
      (setq org-pomodoro-length 15)
      (setq org-pomodoro-short-break-length .5)
      (setq org-pomodoro-start-sound mindfulness-bell)
      (setq org-pomodoro-finished-sound mindfulness-bell)
      (setq org-pomodoro-short-break-sound mindfulness-bell)
      (setq org-pomodoro-long-break-sound mindfulness-chimes)
      (setq org-pomodoro-start-sound-p t))
#+end_src
** Custom
#+BEGIN_SRC elisp :tangle org-config.el
(provide 'as/layer-org)
#+END_SRC
** Babel
#+begin_src elisp :tangle org-config.el
  ; Can't remember what I wanted this for...
  ; (use-package org-plus-contrib) 
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))
   (setq org-confirm-babel-evaluate nil)
#+end_src
** Capture
#+begin_src elisp :tangle org-config.el
  (setq org-capture-templates
        '(("t" "TODO" entry (file+headline as/gtd "Collect")
           "* TODO %? \n%U" :empty-lines 1)
          ("p" "Priority" entry (file+headline as/gtd "Collect")
           "* TODO [#A] %? \nSCHEDULED: %^t")
          ("a" "Appointment" entry (file+headline as/gtd "Collect")
           "* %? \n%^t")
          ("l" "Link" entry (file+headline as/gtd "Collect")
           "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
          ("n" "Note" entry (file+headline as/gtd "Notes")
             "* %?\n%U" :empty-lines 1)
          ("j" "Journal" entry (file+datetree "/Users/andrew/org/agenda/journal.org")
          "* %?\nEntered on %U\n")))
#+end_src
** Agenda
#+begin_src elisp :tangle org-config.el
  (setq org-agenda-include-diary t)
   (setq org-tag-persistent-alist '(("PMI" . ?p)
                                    ("work" . ?w)
                                    ("buy" . ?b)
                                    ("sdm" . ?m)
                                    ("X" . ?x)
                                    ("read" . ?r)
                                    ("school" . ?s)))

  (setq org-agenda-files '("/Users/andrew/org/agenda/"
                           "/Users/andrew/org/projects/"))

   (defun org-archive-done-tasks ()
     (interactive)
     (org-map-entries
      (lambda ()
        (org-archive-subtree)
        (setq org-map-continue-from (outline-previous-heading))) "/DONE" 'agenda))

   (setq org-agenda-sorting-strategy
         '((agenda habit-down timestamp-down priority-down category-keep)
           (todo priority-down timestamp-down category-keep)
           (tags priority-down timestamp-down category-keep)
           (search category-keep timestamp-down)))

   (setq org-agenda-custom-commands
         `(("a" "Current day/week" agenda "" nil
            (,(concat as/views "agenda.ics")
             ,(concat as/views "agenda.org")
             ,(concat as/views "agenda.html")))
           ("p" "PMI"
            ((tags-todo "TODO=\"TODO\"+category=\"PMI\"")
             (tags-todo "TODO=\"DONE\"+category=\"PMI\""))
            ((org-agenda-overriding-header "")
             (org-agenda-remove-tags t))
            (,(concat as/views "pmi-dev-plan.org")))
           ("f" "Fluent Forever"
            ((tags-todo "TODO=\"TODO\"+category=\"Fluent Forever\""))
            ((org-agenda-overriding-header "")
             (org-agenda-remove-tags t)))
           ("Aa" "ALL"
            ((alltodo))
            ((org-agenda-overriding-header "All"))
            (,(concat as/views "all.org")))))
#+end_src
** Hydras
*** Main
#+begin_src elisp :tangle org-config.el
  (defhydra hydra-org-mode ()
    "Org-mode"
    ("t" org-todo "org-todo")
    (":" org-set-tags-command "org-set-tags-command")
    ("n" org-narrow-to-subtree "org-narrow-to-subtree")
    ("w" widen "widen")
    ("s" org-sort)
    ("l" org-demote-subtree "org-demote-subtree")
    ("h" org-promote-subtree "org-promote-subtree")
    ("K" outline-up-heading "org-backward-heading-same-level")
    ("J" org-forward-heading-same-level "org-forward-heading-same-level")
    ("k" outline-previous-visible-heading "outline-previous-visible-heading")
    ("j" outline-next-visible-heading "outline-next-visible-heading")
    ("*" org-toggle-heading "org-toggle-heading")
    ("$" org-archive-done-tasks "org-archive-done-tasks"))
    (evil-leader/set-key-for-mode 'org-mode "m" 'hydra-org-mode/body)
#+end_src
*** Clock
#+begin_src elisp :tangle org-config.el
  (defhydra hydra-org-clock (:color blue :hint nil)
          "
          Clock   In/out^     ^Edit^   ^Summary     (_?_)
          -----------------------------------------
                  _i_n         _e_dit   _g_oto entry
                  _c_ontinue   _q_uit   _d_isplay
                  _o_ut        ^ ^      _r_eport
                  _p_omodoro
          "
          ("i" org-clock-in)
          ("o" org-clock-out)
          ("c" org-clock-in-last)
          ("e" org-clock-modify-effort-estimate)
          ("q" org-clock-cancel)
          ("p" org-pomodoro)
          ("g" org-clock-goto)
          ("d" org-clock-display)
          ("r" org-clock-report)
          ("?" (org-info "Clocking commands")))
#+end_src
*** Block templates
#+begin_src elisp :tangle org-config.el
(defhydra hydra-org-template (:color blue :hint nil)
  "
_c_enter  _q_uote    _L_aTeX:
_l_atex   _e_xample  _i_ndex:
_a_scii   _v_erse    _I_NCLUDE:
_s_rc     ^ ^        _H_TML:
_h_tml    ^ ^        _A_SCII:
"
  ("s" (hot-expand "<s"))
  ("e" (hot-expand "<e"))
  ("q" (hot-expand "<q"))
  ("v" (hot-expand "<v"))
  ("c" (hot-expand "<c"))
  ("l" (hot-expand "<l"))
  ("h" (hot-expand "<h"))
  ("a" (hot-expand "<a"))
  ("L" (hot-expand "<L"))
  ("i" (hot-expand "<i"))
  ("I" (hot-expand "<I"))
  ("H" (hot-expand "<H"))
  ("A" (hot-expand "<A"))
  ("<" self-insert-command "ins")
  ("o" nil "quit"))

(defun hot-expand (str)
  "Expand org template."
  (insert str)
  (org-try-structure-completion))

  (define-key org-mode-map "<"
  (lambda () (interactive)
     (if (looking-back "^")
         (hydra-org-template/body)
       (self-insert-command 1))))
#+end_src
* Windows and frames
** Toolbar
   Save space by not showing the toolbar
#+begin_src elisp
(tool-bar-mode -1)
#+end_src
** Golden ratio mode
#+begin_src elisp
  (use-package golden-ratio
    :commands
    (evil-window-next
     evil-window-right
     evil-window-left
     evil-window-down
     evil-window-up)
    :config
    (golden-ratio-mode 1)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-next)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-right)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-left)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-down)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-up))
#+end_src
** Winner mode
Undo and redo window configuration
#+begin_src elisp
  (use-package winner
    :init
    (evil-leader/set-key
      "wu" 'winner-undo
      "wr" 'winner-redo)
    :commands
    (winner-undo winner-redo)
    :config
    (winner-mode))
#+end_src
** Zoom
#+begin_src elisp
  (use-package zoom-frm
    :commands hydra-zoom)

  (defhydra hydra-zoom (global-map "M-=")
    "zoom"
    ("g" text-scale-increase)
    ("l" text-scale-decrease)
    ("i" zoom-in)
    ("o" zoom-out))
#+end_src
* Backups
#+begin_src elisp
;; Special dir for backups
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

* Magit

#+begin_src elisp
  (use-package magit
    :init (evil-leader/set-key "gs" 'magit-status)
    :commands magit-status
    :config
    (setq magit-git-executable "~/usr/bin/git")
    (add-hook 'git-commit-mode-hook 'git-commit-turn-on-flyspell)
    (evil-set-initial-state 'git-commit-mode 'normal))
#+end_src
* Better defaults
Also look at sensible-defaults
#+begin_src elisp
(show-paren-mode 1)
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
(setq-default save-place t)
(fset 'yes-or-no-p 'y-or-n-p)
(setq initial-scratch-message "") ;; Uh, I know what Scratch is for

#+end_src

** My own
#+begin_src elisp
  (use-package visual-fill-column
    :init
    (global-visual-fill-column-mode)
    (evil-leader/set-key "tl" 'visual-fill-column-mode)
    :config
    (add-hook 'rst-mode-hook 'visual-line-mode))
#+end_src
* Tramp
#+begin_src elisp
;; This doesn't actually seem to be faster...
;; (setq tramp-default-method "ssh")
(setq tramp-inline-compress-start-size 1000000)
#+end_src

* Python

** General
#+begin_src elisp
  (use-package python
      :mode ("\\.py\\'" . python-mode)
      :interpreter ("python" . python-mode)
      :config
      ; org-babel
      (use-package ob-ipython
        :config
        (require 'ob-ipython))
      (org-babel-do-load-languages
       'org-babel-load-languages
       (append org-babel-load-languages
               '((ipython . t)
                 (python . t))))
      (add-hook 'before-save-hook 'py-isort-before-save)
      (add-hook 'python-mode-hook 'smartparens-mode)
      (add-hook 'inferior-python-mode-hook 'smartparens-mode)
      (add-hook 'rst-mode-hook 'turn-on-flyspell)
      (setq python-shell-exec-path '("~/anaconda3/bin/python"))

      (defhydra hydra-python (:color blue :hint nil)
      "
      ^Navigation^                  ^Elpy^                 ^Formatting^
      -------------------------------------------------------------------------
      _d_: find definitions      _t_: elpy-test           _y_: yapfify-buffer
      _a_: find assignments      _z_: switch to shell     _i_: py-isort-buffer
      _r_: find references       _c_: send region/buffer  _f_: flycheck
      _s_: show doc              _C_: send statement      _x_: sphinx-doc
      _v_: pyvenv-activate     
      _V_: pyvenv-deactivate
      _w_: venv-workon
      _W_: venv-deactivate
      "
          ("d" elpy-goto-definition)
          ("a" anaconda-mode-find-assignments)
          ("r" xref-find-references)
          ("s" elpy-doc)
          ("y" yapfify-buffer)
          ("v" pyvenv-activate)
          ("V" pyvenv-deactivate)
          ("w" venv-workon)
          ("W" venv-deactivate)
          ("i" py-isort-buffer)
          ("f" hydra-flycheck/body)
          ("x" sphinx-doc)
          ("t" elpy-hydra/body)
          ("z" elpy-shell-switch-to-shell)
          ("c" elpy-shell-send-region-or-buffer)
          ("C" elpy-shell-send-current-statement))
          (evil-leader/set-key-for-mode 'python-mode "m" 'hydra-python/body)
          (evil-leader/set-key-for-mode 'rst-mode "m" 'hydra-python/body)

      (use-package anaconda-mode
        :commands hydra-python/body
        :config
        (anaconda-mode)
        (anaconda-eldoc-mode)
        (add-to-list 'company-backends 'company-anaconda))
      (use-package sphinx-doc :commands (sphinx-doc)
        :config (sphinx-doc-mode))
      (use-package helm-pydoc :commands helm-pydoc)
      (use-package py-isort :commands py-isort-buffer
        :config (require 'py-isort))
      (use-package virtualenvwrapper :commands (venv-workon)
        :config 
        (venv-initialize-interactive-shells)
        (venv-initialize-eshell)
        (setq venv-location "/Users/andrew/miniconda3/envs"))
      (use-package elpy
        :init (with-eval-after-load 'python (elpy-enable))
        :config 
        (elpy-use-ipython)
        (pyvenv-mode)

        (defhydra elpy-hydra (:color red)
          "
          Elpy in venv: %`pyvenv-virtual-env-name
          "
          ("t" (progn (call-interactively 'elpy-test-pytest-runner) (elpy-nav-errors/body)) "pytest" :color blue)
          ("w" (venv-workon) "workon venv…")
          ("q" nil "quit")
          ("Q" (kill-buffer "*compilation*") "quit and kill compilation buffer" :color blue))

        (defhydra elpy-nav-errors (:color red)
          " Navigate errors "
          ("n" next-error "next error")
          ("p" previous-error "previous error")
          ("s" (progn
                 (switch-to-buffer-other-window "*compilation*")
                 (goto-char (point-max))) "switch to compilation buffer" :color blue)
          ("q" nil "quit")
          ("Q" (kill-buffer "*compilation*") "quit and kill compilation buffer" :color blue))))


 #+end_src
** Fix faulty completion bug
   Source:  https://github.com/jorgenschaefer/elpy/issues/887
   Fixes this error message:
   Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to support readline, yet ‘python-shell-completion-native’ was t and "ipython3" is not part of the ‘python-shell-completion-native-disabled-interpreters’ list. Native completions have been disabled locally.

#+begin_src elisp
(with-eval-after-load 'python
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))
#+end_src
* HPC
** Slurm
#+begin_src elisp
  (use-package slurm-mode
    :load-path "~/.emacs.d/elisp"
    :commands (slurm-mode)
    :config)
#+end_src
* Yapfify
#+begin_src elisp
  (use-package yapfify :commands yapfify-buffer)
#+end_src
* Exec-path-from-shell
#+begin_src elisp
(use-package exec-path-from-shell)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src

* Smartparens
#+begin_src elisp
  (use-package smartparens
    :defer 5
    :config
    (require 'smartparens-config)
    (smartparens-global-mode)
    (autoload 'smartparens-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)
    (defhydra hydra-smartparens (:hint nil)
      "
  Sexps (quit with _q_)

  ^Nav^            ^Barf/Slurp^                 ^Depth^
  ^---^------------^----------^-----------------^-----^-----------------
  _f_: forward     _<left>_:    slurp forward   _R_:      splice
  _b_: backward    _<right>_:   barf forward    _r_:      raise
  _u_: backward ↑  _C-<left>_:  slurp backward  _<up>_:   raise backward
  _d_: forward ↓   _C-<right>_: barf backward   _<down>_: raise forward
  _p_: backward ↓
  _n_: forward ↑

  ^Kill^           ^Misc^                       ^Wrap^
  ^----^-----------^----^-----------------------^----^------------------
  _w_: copy        _j_: join                    _(_: wrap with ( )
  _k_: kill        _s_: split                   _{_: wrap with { }
  ^^               _t_: transpose               _'_: wrap with ' '
  ^^               _c_: convolute               _\"_: wrap with \" \"
  ^^               _i_: indent defun"
      ("q" nil)
      ;; Wrapping
      ("(" (lambda (a) (interactive "P") (sp-wrap-with-pair "(")))
      ("{" (lambda (a) (interactive "P") (sp-wrap-with-pair "{")))
      ("'" (lambda (a) (interactive "P") (sp-wrap-with-pair "'")))
      ("\"" (lambda (a) (interactive "P") (sp-wrap-with-pair "\"")))
      ;; Navigation
      ("f" sp-forward-sexp )
      ("b" sp-backward-sexp)
      ("u" sp-backward-up-sexp)
      ("d" sp-down-sexp)
      ("p" sp-backward-down-sexp)
      ("n" sp-up-sexp)
      ;; Kill/copy
      ("w" sp-copy-sexp)
      ("k" sp-kill-sexp)
      ;; Misc
      ("t" sp-transpose-sexp)
      ("j" sp-join-sexp)
      ("s" sp-split-sexp)
      ("c" sp-convolute-sexp)
      ("i" sp-indent-defun)
      ;; Depth changing
      ("R" sp-splice-sexp)
      ("r" sp-splice-sexp-killing-around)
      ("<up>" sp-splice-sexp-killing-backward)
      ("<down>" sp-splice-sexp-killing-forward)
      ;; Barfing/slurping
      ("<right>" sp-forward-slurp-sexp)
      ("<left>" sp-forward-barf-sexp)
      ("C-<left>" sp-backward-barf-sexp)
      ("C-<right>" sp-backward-slurp-sexp)))
#+end_src
* Projectile
#+begin_src elisp

  (use-package projectile
    :init
    (evil-leader/set-key "p" 'helm-projectile)
    :commands (helm-projectile-switch-project helm-projectile)
    :config
    (evil-leader/set-key "p" 'projectile-command-map)
    (projectile-mode)
    (setq projectile-enable-caching t)
    (use-package helm-projectile
      :config
      (require 'helm-projectile)
      (helm-projectile-on)))

#+end_src
* Themes and fonts
#+begin_src elisp
  (use-package solarized-theme
    :config
    (evil-leader/set-key "tt" 'toggle-theme))
  (load-theme 'solarized-light t)
  (setq active-theme 'solarized-light)
  (defun toggle-theme ()
    (interactive)
    (if (eq active-theme 'solarized-light)
	(setq active-theme 'solarized-dark)
      (setq active-theme 'solarized-light))
    (load-theme active-theme))
  (set-face-attribute 'default t :font 
    "-*-Source Code Pro-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
  (set-face-attribute 'default nil :height 140)
#+end_src
* Completion
** Company

 #+begin_src elisp
   (use-package company
     :diminish company-mode
     :config
     (global-company-mode))
 #+end_src
* Words
** Wordnut
#+begin_src elisp :tangle no
  (use-package wordnut
    :commands (wordnut-search wordnut-lookup-current-word)
    :load-path "packages/wordnut"
    :config
    (require 'wordnut)
    (setq wordnut-cmd "/usr/local/bin/wn"))
#+end_src
** Helm-wordnet
#+begin_src elisp
  (use-package helm-wordnet
    :commands helm-wordnet
    :load-path "packages/helm-wordnet"
    :config
    (setq helm-wordnet-prog "/usr/local/bin/wn"))
    (evil-leader/set-key
      "wd" 'helm-wordnet)
#+end_src

** Google translate
#+begin_src elisp
  (use-package google-translate
    :commands (google-translate-at-point google-translate-smooth-translate)
    :config
    (setq google-translate-default-source-language "nl")
    (setq google-translate-default-target-language "en")
    (evil-leader/set-key
      "wp" 'google-translate-at-point
      "ww" 'google-translate-smooth-translate))
#+end_src

* Display
#+begin_src elisp
(use-package linum-relative
    :config
    (linum-relative-global-mode))
(setq column-number-mode t)
#+end_src
* Flycheck
#+begin_src elisp
  (use-package flycheck
    :init
    (add-hook 'after-init-hook 'global-flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    (defhydra hydra-flycheck
      (:pre (progn (setq hydra-lv t) (flycheck-list-errors))
      :post (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
      :hint nil)
      "Errors"
      ("f"  flycheck-error-list-set-filter                            "Filter")
      ("n"  flycheck-next-error                                       "Next")
      ("p"  flycheck-previous-error                                   "Previous")
      ("gg" flycheck-first-error                                      "First")
      ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
      ("q"  nil)))
#+end_src
* Deft
#+begin_src elisp
  (use-package deft
    :commands deft
    :config
    (setq deft-directory "~/org")
    (setq deft-extensions '("txt" "org"))
    (setq deft-default-extension "org")
    (setq deft-recursive t)
    (setq deft-use-filename-as-title t)
    (setq deft-use-filter-string-for-filename t))

#+end_src
* Elfeed
#+begin_src elisp
(use-package elfeed
    :commands elfeed
    :config
    (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
    (use-package elfeed-org
      :config
      (require 'elfeed-org)
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))))
#+end_src
* Mail
** smtp
#+begin_src elisp
  (setq message-send-mail-function 'smtpmail-send-it
     starttls-use-gnutls t
     smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
     smtpmail-auth-credentials
       '(("smtp.gmail.com" 587 "inbox.asanchez@gmail.com" nil))
     smtpmail-default-smtp-server "smtp.gmail.com"
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-smtp-service 587)
  (setq message-kill-buffer-on-exit t)
#+end_src
** MU4E
 #+begin_src elisp
   (add-to-list 'load-path "/usr/local/Cellar/mu/HEAD-65863e4_1/share/emacs/site-lisp")
   (require 'mu4e)
   (add-hook 'message-send-hook (lambda () (mu4e-update-mail-and-index t)))
   (require 'org-mu4e) ;; store org-mode links to messages
   ;;store link to message if in header view, not to header query
   (setq org-mu4e-link-query-in-headers-mode nil)
   (setq mu4e-change-filenames-when-moving t)
   (setq mu4e-sent-messages-behavior 'delete)
   (setq mu4e-mu-binary "/usr/local/bin/mu")
   (setq mu4e-get-mail-command "/usr/local/bin/mbsync -a")
   (setq mu4e-maildir (expand-file-name "~/Maildir"))
   (setq mu4e-drafts-folder "/drafts") 
   (setq mu4e-sent-folder "/sent")
   (setq mu4e-trash-folder "/trash")
   (setq mu4e-refile-folder "/all")
   (setq mu4e-maildir-shortcuts
         '(("/INBOX". ?i)
           ("/sent" . ?s)
           ("/trash" . ?t)
           ("/all" . ?a)
           ("/drafts" . ?d)))
   (evil-set-initial-state 'mu4e-view-mode 'motion)
   (add-hook 'message-mode-hook 'turn-on-orgstruct++)
   (add-hook 'mu4e-compose-mode-hook 'turn-on-flyspell)
   (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)
   (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
 #+end_src
** Gnus
 #+begin_src elisp :tangle no
   (use-package gnus
     :commands gnus
     :config
       (add-to-list 'evil-emacs-state-modes 'gnus-group-mode)
       (setq gnus-select-method
	     '(nnimap "gmail"
		      (nnimap-address "imap.gmail.com")
		      (nnimap-server-port "993")
		      (nnimap-stream ssl)))
       (setq gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]"
	     gnus-message-archive-group nil)
	     ;; mml2015-encrypt-to-self 
       ;; Attempt to encrypt all outgoin emails
       ;; (add-hook 'message-setup-hook 'mml-secure-message-encrypt)
       (eval-after-load 'gnus-group
       '(progn
	  (defhydra hydra-gnus-group (:color blue)
	    "Do?"
	    ("l" gnus-group-list-all-groups "List subscribed groups")
	    ("a" gnus-group-list-active "List groups on servers")
	    ("c" gnus-group-catchup-all "Read all")
	    ("G" gnus-group-make-nnir-group "Search server G G")
	    ("g" gnus-group-get-new-news "Refresh g")
	    ("s" gnus-group-enter-server-mode "Servers")
	    ("m" gnus-group-new-mail "Compose m OR C-x m")
	    ("#" gnus-topic-mark-topic "mark #")
	    ("q" nil "cancel"))
	  (define-key gnus-group-mode-map "," 'hydra-gnus-group/body)))

     ;; gnus-summary-mode
     (eval-after-load 'gnus-sum
       '(progn
	  (defhydra hydra-gnus-summary (:color blue)
	    "Do?"
	    ("s" gnus-summary-show-thread "Show thread")
	    ("h" gnus-summary-hide-thread "Hide thread")
	    ("n" gnus-summary-insert-new-articles "Refresh / N")
	    ("f" gnus-summary-mail-forward "Forward C-c C-f")
	    ("!" gnus-summary-tick-article-forward "Mail -> disk !")
	    ("p" gnus-summary-put-mark-as-read "Mail <- disk")
	    ("c" gnus-summary-catchup-and-exit "Read all c")
	    ("e" gnus-summary-resend-message-edit "Resend S D e")
	    ("R" gnus-summary-reply-with-original "Reply with original R")
	    ("r" gnus-summary-reply "Reply r")
	    ("W" gnus-summary-wide-reply-with-original "Reply all with original S W")
	    ("w" gnus-summary-wide-reply "Reply all S w")
	    ("#" gnus-topic-mark-topic "mark #")
	    ("q" nil "cancel"))
	  (define-key gnus-summary-mode-map "," 'hydra-gnus-summary/body)))

     ;; gnus-article-mode
     (eval-after-load 'gnus-art
       '(progn
	  (defhydra hydra-gnus-article (:color blue)
	    "Do?"
	    ("f" gnus-summary-mail-forward "Forward")
	    ("R" gnus-article-reply-with-original "Reply with original R")
	    ("r" gnus-article-reply "Reply r")
	    ("W" gnus-article-wide-reply-with-original "Reply all with original S W")
	    ("o" gnus-mime-save-part "Save attachment at point o")
	    ("w" gnus-article-wide-reply "Reply all S w")
	    ("q" nil "cancel"))
	  (define-key gnus-article-mode-map "," 'hydra-gnus-article/body)))

     (eval-after-load 'message
       '(progn (add-hook 'message-mode-hook 'flyspell-mode)
	  (defhydra hydra-message (:color blue)
	    "Do?"
	    ("ca" mml-attach-file "Attach C-c C-a")
	    ("cc" message-send-and-exit "Send C-c C-c")
	    ("q" nil "cancel"))
	  (global-set-key (kbd "C-c C-y") 'hydra-message/body))))
 #+end_src
** Hydra
#+begin_src elisp
  (defhydra hydra-mail (:color blue)
    "Mail"
    ("M" mu4e "mu4e")
    ("m" mu4e~main-menu "mu4e main menu"))
#+end_src

* Keyfreq
#+begin_src elisp
  (use-package keyfreq
    :defer 5
    :config
    (require 'keyfreq)
    (setq keyfreq-excluded-commands
	  '(self-insert-command
	    abort-recursive-edit
	    forward-char
	    backward-char
	    previous-line
	    next-line
	    evil-a-WORD
	    evil-append
	    evil-backward-char
	    evil-backward-word-begin
	    evil-change
	    evil-change-line
	    evil-complete-next
	    evil-complete-previous
	    evil-delete
	    evil-delete-backward-char-and-join
	    evil-delete-char
	    evil-delete-line
	    evil-emacs-state
	    evil-end-of-line
	    evil-escape-emacs-state
	    evil-escape-insert-state
	    evil-escape-isearch
	    evil-escape-minibuffer
	    evil-escape-motion-state
	    evil-escape-visual-state))
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+end_src
* Convenience
#+begin_src elisp
  (use-package restart-emacs
    :init
    (evil-leader/set-key "qr" 'restart-emacs)
    :commands restart-emacs)
#+end_src
* Neotree
#+begin_src elisp
  (use-package neotree :load-path "~/.emacs.d/packages/neotree"
    :commands  neotree-toggle
    :config
    (require 'neotree)
    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter))
#+end_src
* Debugging
** NEXT Figure out how to defer realgud
#+begin_src elisp
  (use-package realgud
    :commands realgud
    :config
    (add-hook 'realgud-short-key-mode-hook
        (lambda ()
          (local-set-key "," realgud:shortkey-mode-map)))
	  (setq realgud:pdb-command-name "python -m pdb"))
#+end_src

* Fun
** Gnugo
#+begin_src elisp
   (use-package gnugo
     :commands gnugo
     :config
     (add-to-list 'evil-emacs-state-modes 'gnugo-board-mode)
     (add-hook 'gnugo-start-game-hook 'gnugo-image-display-mode)
     (setq gnugo-xpms 'gnugo-imgen-create-xpms))
#+end_src 
* Test
#+begin_src elisp :tangle no
#+end_src  
* Future
** TODO [[https://github.com/tlh/workgroups.el][Workgroups]]
   Workgroups for Windows (for Emacs)
It's tedious setting Emacs' window layout just the way you like it -- splitting windows, adjusting their size, switching to the right buffers, etc. And even when it is set, it won't stay that way for long. On top of that, you can't save your window-configurations to disk, so you have to start over from scratch every time you restart Emacs.

There are solutions out there to parts of the problem -- elscreen, revive.el, window-configuration-to-register, etc. -- but none provide a complete solution. Workgroups does.

With Workgroups, you can:

Store an unlimited number of window configs

Save window configs to disk, and load them from disk

Kill and yank window configs

It also provides:

Animated window config morphing

Frame reversing and window movement

A concept of "base" and "working" configs, for maximum flexibility

Lots of other stuff
** TODO [[https://github.com/nex3/perspective-el][Perspective]]
   Description

This package provides tagged workspaces in Emacs, similar to workspaces in windows managers such as Awesome and XMonad (and somewhat similar to multiple desktops in Gnome or Spaces in OS X).

perspective.el provides multiple workspaces (or "perspectives") for each Emacs frame. This makes it easy to work on many separate projects without getting lost in all the buffers.

Each perspective is composed of a window configuration and a set of buffers. Switching to a perspective activates its window configuration, and when in a perspective only its buffers are available by default.

It's recommended that you install perspective.el from Marmalade using M-x package-install. Alternately, you may put it in your load path and run (require 'perspective). Users of Debian 9 or later or Ubuntu 16.04 or later may simply apt-get install elpa-perspective.
** TODO [[https://github.com/ShingoFukuyama/helm-swoop][helm swoop]]
** TODO Steal his code for auto tangling this file in init.el
   - https://github.com/novoid/dot-emacs/blob/master/init.el#L36
   - he based it on this post http://www.holgerschurig.de/en/emacs-init-tangle/
** TODO [[https://github.com/abo-abo/tiny][Tiny - Quickly generate linear ranges in Emacs]]

   
