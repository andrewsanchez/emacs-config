* Init 
** Sources 
#+BEGIN_SRC elisp :tangle yes
  (package-initialize)
  (setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "http://melpa.milkbox.net/packages/")
        ("melpa-stable" . "http://stable.melpa.org/packages/")))

#+END_SRC
** Use-package
#+BEGIN_SRC elisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t)
#+END_SRC
** El-get
#+BEGIN_SRC elisp :tangle no
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
  (setq el-get-user-package-directory "~/.emacs.d/el-get-init-files")
#+END_SRC

** Global
   
#+BEGIN_SRC elisp :tangle yes
  (add-hook 'after-init-hook
	    'global-company-mode)
#+END_SRC

* Personal info
#+BEGIN_SRC elisp :tangle yes
(setq user-full-name "Andrew Sanchez"
      user-mail-address "inbox.asanchez@gmail.com")
#+END_SRC
* Buffers
#+BEGIN_SRC elisp :tangle yes
  (evil-leader/set-key
    "bd" 'kill-this-buffer)
#+end_src

#+RESULTS:

* Evil
#+BEGIN_SRC elisp :tangle yes
  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))

    (use-package evil
      :config
      (evil-mode 1))

    (use-package evil-nerd-commenter
        :config
        (evilnc-default-hotkeys))

    (use-package evil-surround
      :config
      (global-evil-surround-mode 1))

#+END_SRC

#+RESULTS:
: t

** Exclude list
#+BEGIN_SRC elisp :tangle yes
(add-to-list 'evil-emacs-state-modes 'dired-mode)
#+END_SRC

* Helm
  Also check out [[https://github.com/abo-abo/swiper][ivy and swiper]]
#+BEGIN_SRC elisp :tangle yes
  (use-package helm
      :init
      (require 'helm-config)
      (evil-leader/set-key
        "ff" 'helm-find-files
        "fm" 'helm-multi-files
        "fb" 'helm-filtered-bookmarks
        "bb" 'helm-buffers-list
        "sg" 'helm-google-suggest
        "<SPC>" 'helm-M-x
        "sj" 'helm-semantic-or-imenu
        "ha" 'helm-apropos
        "ss" 'helm-occur)
      :bind (("M-y" . helm-show-kill-ring)
             ("C-h a" . helm-apropos)
             ("M-x" . helm-M-x)
             ("C-x b" . helm-buffers-list)))

  (use-package helm-descbinds
    :bind (("C-h b" . helm-descbinds)))
#+END_SRC

#+RESULTS:
  
* Hydra
#+BEGIN_SRC elisp :tangle yes
(use-package hydra)
#+END_SRC
** zoom
#+BEGIN_SRC elisp :tangle yes
(defhydra hydra-zoom (global-map "C-=")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
#+END_SRC

#+RESULTS:
: hydra-zoom/body

* Org-mode
** Config
#+BEGIN_SRC elisp :tangle yes
  (use-package org
    :load-path "~/.emacs.d/packages/org-mode/lisp"
    :config
    (setq org-hide-leading-stars t)
    (setq org-default-notes-file "/Users/andrew/org/notes.org")
    (setq org-capture-templates
	'(("t" "TODO" entry (file+headline "/Users/andrew/org/gtd.org" "Tasks")
	    "* TODO %? \nAdded:  %U\n" :empty-lines 1)
	    ("j" "Journal" entry (file+datetree "/Users/andrew/org/journal.org")
	    "* %?\nEntered on %U\n")
	    ("n" "Note" entry (file+headline "/Users/andrew/org/notes.org" "Notes")
	    "* %i\n")))
    (setq org-refile-targets '((nil :maxlevel . 5)
			       (org-agenda-files :maxlevel . 4)))
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path 'file)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-src-fontify-natively t)
    (setq org-agenda-files '("/Users/andrew/org/gtd.org"))
    ;; Hydras
    (evil-leader/set-key-for-mode 'org-mode
      "h" 'hydra-org-headings/body))

   (evil-leader/set-key
       "oa" 'org-agenda
       "oc" 'org-capture
       "ot" 'hydra-org-clock/body)

#+END_SRC

** Hydras
*** Clock
   
#+BEGIN_SRC elisp :tangle yes

   (defhydra hydra-org-clock (:color blue :hint nil)
       "

       Clock   In/out^     ^Edit^   ^Summary     (_?_)
       -----------------------------------------
	       _i_n         _e_dit   _g_oto entry
	       _c_ontinue   _q_uit   _d_isplay
	       _o_ut        ^ ^      _r_eport
       "
       ("i" org-clock-in)
       ("o" org-clock-out)
       ("c" org-clock-in-last)
       ("e" org-clock-modify-effort-estimate)
       ("q" org-clock-cancel)
       ("g" org-clock-goto)
       ("d" org-clock-display)
       ("r" org-clock-report)
       ("?" (org-info "Clocking commands")))
 #+END_SRC
*** Headings and trees
#+BEGIN_SRC elisp :tangle yes

    (defhydra hydra-org-headings ()
    "Headings"
	("t" org-todo "org-todo")
	(":" org-set-tags-command "org-set-tags-command")
	("n" org-narrow-to-subtree "org-narrow-to-subtree")
	("w" widen "widen")
	("l" org-demote-subtree "org-demote-subtree")
	("h" org-promote-subtree "org-promote-subtree")
	("K" org-backward-heading-same-level "org-backward-heading-same-level")
	("J" org-forward-heading-same-level "org-forward-heading-same-level")
	("k" outline-previous-visible-heading "outline-previous-visible-heading")
	("j" outline-next-visible-heading "outline-next-visible-heading"))
#+END_SRC

#+RESULTS:
: hydra-org-headings/body

* Windows and frames
** Save space by not showing the toolbar
#+BEGIN_SRC elisp :tangle yes
(tool-bar-mode -1)
#+END_SRC

** Full screen
#+BEGIN_SRC elisp :tangle yes
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

** Golden ratio mode
#+BEGIN_SRC elisp :tangle yes
  (use-package golden-ratio
    :config
    (golden-ratio-mode 1)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-next)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-right)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-left)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-down)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-up))
#+end_src
#+END_SRC
** Winner mode
Undo and redo window configuration
#+begin_src elisp :tangle yes
  (use-package winner
    :config
    (winner-mode 1)
    (evil-leader/set-key
      "wu" 'winner-undo
      "wr" 'winner-redo))
#+end_src

** Zoom
#+begin_src elisp :tangle yes
(defhydra hydra-zoom (global-map "C-=")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
#+end_src
#+END_SRC

* Backups
#+BEGIN_SRC elisp :tangle yes
;; Special dir for backups
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

* Magit
Not sure why these aren't working

:config (setq magit-git-executable '("~/usr/bin/git"))
'(magit-git-executable "~/usr/bin/git")

#+BEGIN_SRC elisp :tangle yes
    (use-package magit
      :config
      (evil-leader/set-key
        "gs" 'magit-status))
#+END_SRC

#+RESULTS:
: t

* Better defaults
Also look at sensible-defaults
#+BEGIN_SRC elisp :tangle yes
(show-paren-mode 1)
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
(setq-default save-place t)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+RESULTS:
: y-or-n-p

* Tramp
  This doesn't actually seem to be faster...
#+BEGIN_SRC elisp :tangle no
(setq tramp-default-method "ssh")
#+END_SRC

* Which-key
  Also check out [[https://github.com/nonsequitur/smex][smex]] 
#+BEGIN_SRC elisp :tangle yes
(use-package which-key
    :config
    (which-key-mode))
#+END_SRC
* Python
#+BEGIN_SRC elisp :tangle yes
  (use-package python
    :config
    (setq python-shell-exec-path '("~/anaconda3/bin/python")))

  (use-package anaconda-mode)
  (add-hook 'python-mode-hook
	    'anaconda-mode
	    'anaconda-eldoc-mode)
#+END_SRC

* Exec-path-from-shell
  Doesn't seem to work for me :(
#+BEGIN_SRC elisp
(use-package exec-path-from-shell)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

* Smartparens
#+BEGIN_SRC elisp :tangle yes
  (use-package smartparens
      :init
      (require 'smartparens-config)
      :config
      (autoload 'smartparens-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
      (add-hook 'emacs-lisp-mode-hook       #'smartparens-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)
      (add-hook 'ielm-mode-hook             #'smartparens-mode)
      (add-hook 'lisp-mode-hook             #'smartparens-mode)
      (add-hook 'lisp-interaction-mode-hook #'smartparens-mode)
      (add-hook 'scheme-mode-hook           #'smartparens-mode))
#+END_SRC

* Projectile
#+BEGIN_SRC elisp :tangle yes

    (use-package projectile
      :init
      (projectile-mode)
      :config
      (evil-leader/set-key
      "p" 'projectile-command-map))

    (use-package helm-projectile
      :config
      (require 'helm-projectile)
      (helm-projectile-on))

#+END_SRC

* Yasnippet
  (use-package yasnippet :load-path "~/.emacs.d/packages/yasnippet"
    :config
    (require 'yasnippet)
    (yas-global-mode 1))
#+BEGIN_SRC elisp :tangle yes
#+END_SRC

#+RESULTS:
: hydra-yasnippet/body

* Themes and fonts
#+BEGIN_SRC elisp :tangle yes
(use-package solarized-theme)
(load-theme 'solarized-dark t)
(set-face-attribute 'default t :font 
  "-*-Source Code Pro-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
#+END_SRC

#+RESULTS:

* Completion

#+BEGIN_SRC elisp :tangle yes
  (use-package company)
  (eval-after-load "company"
    '(add-to-list 'company-backends 'company-anaconda))
#+END_SRC

#+RESULTS:
: t

* Future
** TODO Create list for globally enabled packages
